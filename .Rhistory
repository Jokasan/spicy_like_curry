xgb_spec <- boost_tree(
trees = tune(),
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),
sample_size = tune(),
mtry = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("classification")
steph_workflow <- workflow() %>%
add_recipe(steph_recipe) %>%
add_model(xgb_spec)
xgb_grid <- grid_latin_hypercube(
trees(),
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), steph_train),
learn_rate(),
size = 30
)
)
xgb_spec <- boost_tree(
trees = tune(),
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),
sample_size = tune(),
mtry = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("classification")
steph_workflow <- workflow() %>%
add_recipe(steph_recipe) %>%
add_model(xgb_spec)
xgb_grid <- grid_latin_hypercube(
trees(),
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), steph_train),
learn_rate(),
size = 30
)
doParallel::registerDoParallel() # Activate parallel computing
set.seed(1234)
xgb_results <-  tune_grid(
steph_workflow,
resamples = steph_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
xgb_results %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mean, mtry:sample_size) %>%
pivot_longer(mtry:sample_size,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean)) +
geom_point(alpha = 0.8, show.legend = FALSE, color="midnightblue") +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")+
scale_color_brewer(palette = "Spectral")+
theme_minimal()
best_auc_model <- select_best(xgb_results,"roc_auc")
final_xgb <- finalize_workflow(
steph_workflow,
best_auc_model
)
final_xgb %>%
fit(data = steph_train) %>%
extract_fit_parsnip() %>%
vip(geom = "point") +
theme_minimal()
final_res <- last_fit(final_xgb, steph_split)
final_res %>%
collect_predictions() %>%
roc_curve(scoring_play, `.pred_FALSE`) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(linewidth = 1.5, color = "midnightblue") +
geom_abline(
lty = 2, alpha = 0.5,
color = "gray50",
linewidth = 1.2
)+theme_minimal()
nba_pbp %>%
filter(season <= 2023 &
athlete_id_1 == 3975 &
shooting_play == TRUE &
!grepl("Free Throw",type_text)) %>%
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play))) -> base_steph_pbp
set.seed(123)
steph_split <- initial_split(base_steph_pbp, prop = 0.8, strata = scoring_play)
steph_train <- training(steph_split)
steph_test <- testing(steph_split)
steph_folds <- vfold_cv(steph_train, v = 10, strata = scoring_play)
# Preprocessing:
# Add new step to address NAs
steph_recipe <- recipe(scoring_play ~ ., data = steph_train) %>%
update_role(game_id, new_role = "ID") %>%
step_dummy(all_nominal(), -all_outcomes())
xgb_spec <- boost_tree(
trees = 1250,
tree_depth = tune(),
min_n = tune(),
loss_reduction = tune(),
sample_size = tune(),
mtry = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("classification")
steph_workflow <- workflow() %>%
add_recipe(steph_recipe) %>%
add_model(xgb_spec)
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), steph_train),
learn_rate(),
size = 30
)
doParallel::registerDoParallel() # Activate parallel computing
set.seed(1234)
xgb_results <-  tune_grid(
steph_workflow,
resamples = steph_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
xgb_results %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mean, mtry:sample_size) %>%
pivot_longer(mtry:sample_size,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean)) +
geom_point(alpha = 0.8, show.legend = FALSE, color="midnightblue") +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")+
scale_color_brewer(palette = "Spectral")+
theme_minimal()
# Select best model and finalise workflow:
best_auc_model <- select_best(xgb_results,"roc_auc")
final_xgb <- finalize_workflow(
steph_workflow,
best_auc_model
)
final_xgb %>%
fit(data = steph_train) %>%
extract_fit_parsnip() %>%
vip(geom = "point") +
theme_minimal()
final_res <- last_fit(final_xgb, steph_split)
final_res %>%
collect_predictions() %>%
roc_curve(scoring_play, `.pred_TRUE`) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity)) +
geom_line(linewidth = 1.5, color = "midnightblue") +
geom_abline(
lty = 2, alpha = 0.5,
color = "gray50",
linewidth = 1.2
)+theme_minimal()
final_res %>% augment(steph_test)
augment(final_res,steph_test)
final_res %>% extract_fit_parsnip()
final_res %>% extract_fit_parsnip() %>% tidy()
final_res %>% extract_fit_parsnip() %>% augment(steph_test)
final_xgb
augment(final_xgb,steph_test)
final_xgb %>%
fit(data = steph_train) -> fit_steph
augment(fit_steph,steph_test)
augment(fit_steph,steph_test)
augment(fit_steph,steph_test)%>%
roc_curve(truth = scoring_play, .pred_TRUE) %>%
autoplot()
final_res
final_res %>%
collect_predictions()
final_res %>%
collect_predictions() %>% %>%
final_res %>%
collect_predictions() %>%
roc_curve(truth = scoring_play, .pred_TRUE)  %>%
autoplot()
pg_stats %>%
select(team_name,athlete_display_name,field_goals_made,three_point_field_goals_made,free_throws_made,rebounds,assists) %>%
rename(
Team = team_name,
Player = athlete_display_name,
P2M = field_goals_made,
P3M = three_point_field_goals_made,
FTM = free_throws_made,
REB = rebounds,
AST = assists) %>%
mutate(Player = case_when(Team == "Nets" & Player == "Kyrie Irving" ~ "Kyrie Irving (BKN)",
Team == "Mavericks" & Player == "Kyrie Irving" ~ "Kyrie Irving (DAL)",
TRUE ~ Player)) %>%
as.data.frame() %>%
arrange(desc(P2M))
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(BasketballAnalyzeR,tidyverse,zoo,gt,hoopR,patchwork,tidymodels,reactablefmtr,htmltools,crosstalk,patchwork,shiny)
team_logos <- readr::read_csv("Logo_info.csv") %>%
select(TEAM_LOGO,TEAM_NAME,CONFERENCE) %>%
unique() %>%
rbind(c("https://upload.wikimedia.org/wikipedia/en/thumb/2/21/Portland_Trail_Blazers_logo.svg/2560px-Portland_Trail_Blazers_logo.svg.png","Portland Trail Blazers", "Western")) %>%
mutate(TEAM_NAME=if_else(TEAM_NAME == "Los Angeles Clippers","LA Clippers",TEAM_NAME))
nba_team_box <- read_csv("nba_team_box.csv")
nba_player_box <- read_csv("nba_player_box.csv")
nba_pbp <- read_csv("nba_pbp.csv")
pg_stats %>%
select(team_name,athlete_display_name,field_goals_made,three_point_field_goals_made,free_throws_made,rebounds,assists) %>%
rename(
Team = team_name,
Player = athlete_display_name,
P2M = field_goals_made,
P3M = three_point_field_goals_made,
FTM = free_throws_made,
REB = rebounds,
AST = assists) %>%
mutate(Player = case_when(Team == "Nets" & Player == "Kyrie Irving" ~ "Kyrie Irving (BKN)",
Team == "Mavericks" & Player == "Kyrie Irving" ~ "Kyrie Irving (DAL)",
TRUE ~ Player)) %>%
as.data.frame() %>%
arrange(desc(P2M))
#| message: false
# Team names data frame:
team_names <- nba_team_box %>%
select(team_name,team_display_name) %>%
unique()
# Filter nba_player_box, for point guards
nba_player_box %>%
filter(athlete_position_name == "Point Guard") -> point_guard_df
# Select columns that we need
point_guard_df %>%
select(season,athlete_id,athlete_display_name,athlete_position_name,team_name,
minutes,field_goals_made,three_point_field_goals_made,free_throws_made,
rebounds,assists,offensive_rebounds,defensive_rebounds,steals,blocks) -> pg_stats
# PG stats summary
pg_stats %>%
filter(season == 2023 & !grepl("Team",team_name)) %>%
group_by(athlete_display_name, team_name) %>%
mutate(total_points =    sum(
field_goals_made + three_point_field_goals_made + free_throws_made,
na.rm = TRUE
)) %>%
ungroup() %>%
group_by(athlete_display_name, team_name) %>%
summarise(
minutes = sum(minutes, na.rm = TRUE),
field_goals_made = mean(field_goals_made, na.rm = TRUE),
three_point_field_goals_made = mean(three_point_field_goals_made, na.rm = TRUE),
free_throws_made = mean(free_throws_made, na.rm = TRUE),
assists = mean(assists, na.rm = TRUE),
rebounds = mean(offensive_rebounds + defensive_rebounds, na.rm = TRUE),
total_points = sum(max(total_points))) %>%
arrange(desc(total_points)) %>%
ungroup() -> pg_stats
pg_stats %>%
head(5)
# Reactive set up
pg_stats %>%
left_join(team_names, by = c("team_name" = "team_name")) %>%
left_join(team_logos, by = c("team_display_name" = "TEAM_NAME")) %>%
select(athlete_display_name,TEAM_LOGO,everything()) ->pg_stats
pg_stats %>%
select(team_name,athlete_display_name,field_goals_made,three_point_field_goals_made,free_throws_made,rebounds,assists) %>%
rename(
Team = team_name,
Player = athlete_display_name,
P2M = field_goals_made,
P3M = three_point_field_goals_made,
FTM = free_throws_made,
REB = rebounds,
AST = assists) %>%
mutate(Player = case_when(Team == "Nets" & Player == "Kyrie Irving" ~ "Kyrie Irving (BKN)",
Team == "Mavericks" & Player == "Kyrie Irving" ~ "Kyrie Irving (DAL)",
TRUE ~ Player)) %>%
as.data.frame() %>%
arrange(desc(P2M))
pg_stats %>%
select(team_name,athlete_display_name,field_goals_made,three_point_field_goals_made,free_throws_made,rebounds,assists) %>%
rename(
Team = team_name,
Player = athlete_display_name,
P2M = field_goals_made,
P3M = three_point_field_goals_made,
FTM = free_throws_made,
REB = rebounds,
AST = assists) %>%
mutate(Player = case_when(Team == "Nets" & Player == "Kyrie Irving" ~ "Kyrie Irving (BKN)",
Team == "Mavericks" & Player == "Kyrie Irving" ~ "Kyrie Irving (DAL)",
TRUE ~ Player)) %>%
as.data.frame() %>%
arrange(desc(P2M)) %>% as_tibble()
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=3, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom")->p3
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom")->p3
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom",legend.title.position = "top")
nba_pbp %>%
filter(season == 2023) %>%
select(coordinate_x,coordinate_y,coordinate_x_raw,coordinate_y_raw,scoring_play,score_value,
shooting_play,clock_minutes) %>%
mutate(result=as.factor(if_else(scoring_play == TRUE, "made","missed")))-> curry_shots
subdata <- curry_shots %>% as.data.frame()
subdata$xx <- subdata$coordinate_x_raw-25
subdata$yy <- subdata$coordinate_y_raw-44
shotchart(data=subdata, x="xx", y="yy",z="result" ,type=NULL,scatter=TRUE)->p1
p1
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom",legend.title.position = "top")
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom")
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom",
plot.margin = unit(c(1, 1, 1, 1), "cm"))
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom",
plot.margin = unit(c(1, 2, 1, 1), "cm"))
shotchart(data=subdata, x="xx", y="yy", z="clock_minutes",
num.sect=4, type="sectors", scatter=FALSE, result="result")+
theme(legend.position = "bottom",
plot.margin = unit(c(2, 2, 2, 2), "cm"))
shotchart(data=subdata, x="xx", y="yy", type="density-raster",
scatter=FALSE)
#| warning: false
shotchart(data=subdata, x="xx", y="yy", type="density-raster",
scatter=FALSE)
#| warning: false
shotchart(data=subdata, x="xx", y="yy", type="density-raster",result = "made",
scatter=FALSE)
#| warning: false
shotchart(data=subdata, x="xx", y="yy", type="density-raster",result = "made",
scatter=FALSE)
#| warning: false
shotchart(data=subdata, x="xx", y="yy", type="density-raster",result = "result",
scatter=FALSE)
nba_pbp
nba_pbp
nba_pbp %>% filter(season == 2024)
nba_pbp %>%
filter(season <= 2023 &
athlete_id_1 == 3975 & # remove this filter
shooting_play == TRUE & # and this one
!grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play))) -> base_steph_pbp
nba_pbp %>%
filter(season <= 2023) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play)))
nba_player_box
tictoc::tic()
progressr::with_progress({
nba_pbp <- hoopR::load_nba_pbp(2022:hoopR::most_recent_nba_season())
})
tictoc::toc()
nba_pbp %>%
filter(season <= 2023 &
athlete_id_1 == 3975 & # remove this filter
shooting_play == TRUE & # and this one
!grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr)
nba_pbp %>%
filter(               athlete_id_1 == 3975 & # remove this filter
shooting_play == TRUE & # and this one
!grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr)
nba_pbp %>%
filter(               athlete_id_1 == 3975 & # remove this filter
shooting_play == TRUE & # and this one
!grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr)-> nba_pbp
nba_pbp
nba_pbp %>% write_csv(file = "nba_pbp.csv")
library(readr)
nba_pbp <- read_csv("nba_pbp.csv")
View(nba_pbp)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(BasketballAnalyzeR,tidyverse,zoo,gt,hoopR,patchwork,tidymodels,reactablefmtr,htmltools,crosstalk,patchwork,shiny)
team_logos <- readr::read_csv("Logo_info.csv") %>%
select(TEAM_LOGO,TEAM_NAME,CONFERENCE) %>%
unique() %>%
rbind(c("https://upload.wikimedia.org/wikipedia/en/thumb/2/21/Portland_Trail_Blazers_logo.svg/2560px-Portland_Trail_Blazers_logo.svg.png","Portland Trail Blazers", "Western")) %>%
mutate(TEAM_NAME=if_else(TEAM_NAME == "Los Angeles Clippers","LA Clippers",TEAM_NAME))
nba_team_box <- read_csv("nba_team_box.csv")
nba_player_box <- read_csv("nba_player_box.csv")
nba_pbp <- read_csv("nba_pbp.csv")
nba_pbp
nba_pbp %>%
filter(season <= 2023 ) %>%
# athlete_id_1 == 3975 & # remove this filter
# shooting_play == TRUE & # and this one
# !grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play))) -> base_steph_pbp
nba_pbp
tictoc::tic()
progressr::with_progress({
nba_pbp <- hoopR::load_nba_pbp(2022:hoopR::most_recent_nba_season())
})
tictoc::toc()
nba_pbp %>%
filter(               athlete_id_1 == 3975 & # remove this filter
shooting_play == TRUE & # and this one
!grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,season,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr)-> nba_pbp
nba_pbp %>% write_csv(file = "nba_pbp.csv")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(BasketballAnalyzeR,tidyverse,zoo,gt,hoopR,patchwork,tidymodels,reactablefmtr,htmltools,crosstalk,patchwork,shiny)
team_logos <- readr::read_csv("Logo_info.csv") %>%
select(TEAM_LOGO,TEAM_NAME,CONFERENCE) %>%
unique() %>%
rbind(c("https://upload.wikimedia.org/wikipedia/en/thumb/2/21/Portland_Trail_Blazers_logo.svg/2560px-Portland_Trail_Blazers_logo.svg.png","Portland Trail Blazers", "Western")) %>%
mutate(TEAM_NAME=if_else(TEAM_NAME == "Los Angeles Clippers","LA Clippers",TEAM_NAME))
nba_team_box <- read_csv("nba_team_box.csv")
nba_player_box <- read_csv("nba_player_box.csv")
nba_pbp <- read_csv("nba_pbp.csv")
nba_pbp
nba_pbp %>%
filter(season <= 2023 ) %>%
# athlete_id_1 == 3975 & # remove this filter
# shooting_play == TRUE & # and this one
# !grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play))) -> base_steph_pbp
# Get the distinct set of player ids:
nba_player_box %>%
select(athlete_id,athlete_display_name) %>%
distinct() %>%
arrange(athlete_id)-> player_ids
player_ids %>%
group_by(athlete_id) %>%
mutate(row = row_number()) %>%
filter(row==1) %>%
ungroup() %>%
select(athlete_id,athlete_display_name) -> player_ids
# Get Game IDs for the Golden State Warriors
nba_team_box %>%
filter(season <= 2023 & team_display_name == "Golden State Warriors") %>%
select(game_id,opponent_team_name) -> game_ids
nba_pbp %>%
filter(season <= 2023 ) %>%
# athlete_id_1 == 3975 & # remove this filter
# shooting_play == TRUE & # and this one
# !grepl("Free Throw",type_text)) %>% # exclude free throws
select(game_id,coordinate_x_raw,coordinate_y_raw,scoring_play,
clock_minutes, athlete_id_2,clock_minutes,clock_seconds,qtr) %>%
left_join(player_ids,by=c("athlete_id_2"="athlete_id")) %>%
inner_join(game_ids, by=join_by(game_id)) %>%
select(-athlete_id_2) %>%
rename(oponent_athlete=athlete_display_name) %>%
mutate(oponent_athlete = if_else(is.na(oponent_athlete),"no direct oponent",oponent_athlete),
scoring_play = fct_rev(as_factor(scoring_play))) -> base_steph_pbp
base_steph_pbp
